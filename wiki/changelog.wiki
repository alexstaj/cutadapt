#summary Archived release announcements

= Changelog =

*November 4, 2011:* cutadapt v1.0 has been released. This special version number does not mark fundamental changes, it merely indicates that cutadapt is now a mature tool. Thanks also to all external contributors for their work on improving the tool!

The changes in this release are:
  * ASCII-encoded quality values were assumed to be encoded as ascii(quality+33). With the new parameter --quality-base, FASTQ files with qualities encoded as ascii(quality+64) as used in some versions of the Illumina pipeline can be read (fixes issue 7.)
  * Allow to specify that adapters were ligated to the 5' end of reads. This change is based on a patch contributed by James Casbon.
  * Add Galaxy support, contributed by Lance Parsons.
  * Patch by James Casbon: Allow N wildcards in read or adapter or both. Wildcard matching of 'N's in the adapter is always done. If 'N's within reads should also match without counting as error, this needs to be explicitly requested via --match-read-wildcards.

*July 20, 2011:* cutadapt v0.9.5 has been released. Please note that this version produces slightly different results compared to older versions! The changes are:

  * Fix issue 20: Make the report go to standard output when -o/--output is specified.
  * Recognize .fq as an extension for FASTQ files
  * Add more unit tests (run them with {{{cd tests; ./tests.sh}}})
  * The alignment algorithm has changed. It will now find some adapters that previously were missed.

With the old alignment algorithm, finding an adapter would work as follows:
  # Find an alignment between adapter and read -- longer alignments are better.
  # If the number of errors in the alignment (divided by length) is above the maximum error rate, report the adapter as not being found.
Sometimes, the long alignment that was found had too many errors, but a shorter alignment would not. The adapter was then incorrectly seen as "not found". The new alignment algorithm checks the error rate while aligning and only reports alignments that do not have too many errors.


*May 20, 2011:* cutadapt v0.9.4 has been released. These are the changes:
  * Now compatible with Python 3.
  * Add the --zero-cap option, which changes negative quality values to zero.
This is a workaround to avoid segmentation faults in BWA. The option is now
enabled by default when --bwa/--maq is used.
  * Lots of unit tests added. Run them with cd tests && ./tests.sh .
  * Fix issue 16: --discard-trimmed did not work.
  * Allow to override auto-detection of input file format with the new -f/--format parameter. This mostly fixes issue 12.
  * Don't break when the input file is empty.

*March 16, 2011:* cutadapt v0.9.3 has been released. (*Note:* v0.9.2 had an incorrect manifest file. If you already have it and can run it, don't worry.)
  * Case is now ignored when comparing the adapter with the read sequence.
  * .FASTA/.QUAL files (not necessarily in color space) can now be read (some 454 software uses this format)
  * Allow to input FASTA/FASTQ on standard input, fixing issue 10.
  * The package has been refactored a lot. It now installs a single 'cutadapt' Python package instead of multiple Python modules. This avoids cluttering the global namespace and should lead to less problems with other Python modules. Thanks to Steve Lianoglou for pointing this out to me!

*January 10, 2011:* cutadapt v0.9 is available. New features are:
  * Use --too-short-output and --untrimmed-output to redirect too short or untrimmed reads to a separate file, based on patch by Paul Ryvkin (thanks!).
  * With --maximum-length, reads longer than a specified length can be discarded.
  * Added the --length-tag option, which helps to fix read lengths in FASTA/Q comment lines  (e.g., 'length=123' becomes 'length=58' after trimming) (requested by Paul Ryvkin)
  * add -q/--quality-cutoff option for trimming low-quality ends (uses the same algorithm as BWA)                                                                               

*December 9, 2010:* cutadapt v0.8 has been released. Important changes are:
  * The default behavior now is to assume that an adapter has been ligated to the 3' end. This should be the correct  behavior for at least the SOLiD small RNA protocol (SREK) and also for the Illumina protocol. See the README for details.
  * Different scoring function improves trimming: Some reads that should have been trimmed weren't.
  * 20% faster                            

*December 3, 2010:* cutadapt v0.7 has been released. Most visible change in this release is the support for discarding reads that are shorter than a specified length after trimming (--minimum-length or -m parameter). Error reporting was improved when encountering malformed files.

*November 18, 2010:* cutadapt v0.6 supports gzipped input and output.

*November 17, 2010:* cutadapt v0.5.1 has been released. This release adds the option "--discard" to discard reads matching an adapter. (This deprecates 0.5, which contained a syntax error in the setup script.)

*November 17, 2010:* cutadapt v0.4 has been released. This release fixes a bug that occurred when dealing with multiple adapters.

*September 27, 2010:* cutadapt v0.3 has been released. This version fixes a bug that led to huge memory usage when reading CSFASTA/QUAL files.